###
# Copyright 2016 - 2024 Green River Data Analysis, LLC
#
# License detail: https://github.com/greenriver/boston-cas/blob/production/LICENSE.md
###

class ClientOpportunityMatchContact < ApplicationRecord
  # join model that represents the dedicated contact list for an
  # individual match.  These are automatically generated by the system
  # when the match was created and can be reviewed and updated by DND staff

  belongs_to :match, class_name: 'ClientOpportunityMatch', inverse_of: :client_opportunity_match_contacts
  belongs_to :contact, inverse_of: :client_opportunity_match_contacts

  include ContactJoinModel

  acts_as_paranoid

  scope :for_contact_type, ->(contact_type) do
    contact_type_column = ClientOpportunityMatchContact.column_for(contact_type)
    where(contact_type_column => true)
  end

  def self.text_search(text)
    return none unless text.present?

    contact_matches = Contact.where(
      Contact.arel_table[:id].eq(arel_table[:contact_id]),
    ).text_search(text).arel.exists

    where(contact_matches)
  end

  def self.contact_types
    [
      :shelter_agency,
      :client,
      :dnd_staff,
      :housing_subsidy_admin,
      :ssp,
      :hsp,
      :do,
    ].freeze
  end

  def self.contact_type_columns
    contact_types.map { |t| ["#{t}_contacts".to_sym, t] }.to_h
  end

  def self.column_for(contact_type)
    contact_type_columns[contact_type] || contact_type
  end

  def self.join_contact_methods
    contact_types.map { |t| ["#{t}_contacts".to_sym, "#{t}_join_contacts".to_sym] }.to_h
  end

  def self.join_method_for(contact_type)
    join_contact_methods[contact_type] || contact_type
  end
end
