= render 'menus/admin_tabs'

.o-page
  .o-page__title
    %h1= t '.title'
    .o-page__action.o-page__action--stacked
      = link_to new_user_invitation_path, class: 'btn btn-primary pull-right margin-bottom-02' do
        %span.icon-plus
        Add a User Account

  - @prompt = t '.search_prompt'

  .row
    .col-sm-6
      = render 'search_form'

%ul.nav.nav-tabs
  %li.nav-item
    - active_selected = 'active' unless params[:q].present? && @users.empty?
    %a.nav-link{class: active_selected, href: '#active', role: "presentation", data: {toggle: :tab}}
      Active Accounts
  %li.nav-item
    - inactive_selected = 'active' if active_selected.blank?
    %a.nav-link{class: inactive_selected, href: '#inactive', role: "presentation", data: {toggle: :tab}}
      Inactive Accounts
.tab-content
  .tab-pane#active{class: active_selected}
    .row.table-utilities
      .col-sm-8
        %p= page_entries_info @users, entry_name: 'user account'
        :ruby
          columns = ['last_name', 'email']
          directions = current_sort_order(Hash[columns.map {|x| [x, nil]}])
          titles = {}
          directions.each {| k,v | titles[k] = @users.human_attribute_name(k)}
          titles['last_name'] = 'Name'
    .table-responsive
      .c-card.c.card__flush.mb-4
        .c-card__content.p-0
          %table.table.table-striped.mb-0
            %thead
              %tr
                - titles.each do | k, title |
                  %th
                    = manual_sort_link(titles[k], k, directions)
                    %i{:class => ["fa", "fa-sort-#{directions[k]}"] }
                %th Roles
                %th Status
                %th Matches
                %th Actions

            %tbody
              - @users.each do |user|
                %tr
                  %td
                    .user__name
                      = user.name
                    - if user.agency
                      .user__agency
                        %em.text-muted= user.agency.name
                    - else
                      .text-danger.user__agency{ data: { toggle: :tooltip, title: 'Lack of agency may prevent login, password reset, and account deletion. Edit the account to set the agency.' }}
                        %i.icon-warning
                        %em
                          = link_to 'Agency not assigned!', edit_admin_user_path(id: user), class: 'text-danger'
                  %td
                    = user.email
                  %td= user.roles_string
                  %td= render 'user_invitation_status', user: user
                  %td.text-center
                    - matches = user.contact&.client_opportunity_match_contacts&.joins(:match) || []
                    = matches.size
                  %td
                    .w-100
                      = link_to(edit_admin_user_path(id: user), class: 'btn btn-sm btn-secondary mb-2 text-nowrap') do
                        %i.icon-pencil
                        Edit

                    - if can_audit_users?
                      .w-100
                        = link_to admin_user_audit_path(user), class: 'btn btn-sm btn-secondary mb-2' do
                          %i.icon-eye{data: {toggle: :tooltip, title: 'Audit'}}
                          Audit

                    - if can_become_other_users? && user.impersonateable_by?(true_user)
                      .w-100
                        = link_to impersonate_admin_user_path(true_user, become_id: user.id), method: :post, class: 'btn btn-sm btn-secondary mb-2' do
                          %i.icon-enter
                          Become

                    - if user.valid?
                      .w-100
                        = link_to admin_user_path(user),  method: :delete, data: {confirm: "Would you really like to de-activate the account? #{user.name} will no longer be able to login."}, class: 'btn btn-sm btn-danger mb-2 text-nowrap' do
                          %i.icon-cross
                          De-Activate

        %p= paginate @users, params: {sort: directions.compact.keys.first, direction: directions.compact.values.first}
  .tab-pane#inactive{class: inactive_selected}
    .table-responsive
      .c-card.c.card__flush.mb-4
        .c-card__content.p-0
          %table.table.table-striped.mb-0
            %thead
              %tr
                - titles.each do | k, title |
                  %th
                    = manual_sort_link(titles[k], k, directions)
                    %i{:class => ["fa", "fa-sort-#{directions[k]}"] }
                %th
            %tbody
              - @inactive_users.each do |user|
                %tr
                  %td= user.name
                  %td
                    = user.email
                  %td
                    = simple_form_for(user, url: reactivate_admin_user_path(user)) do |f|
                      = f.button :button, data: { confirm: 'When re-activating an account, the password will be set to something random and an email will be sent to the address on file with a link to pick a new password.' }, class: 'btn btn-primary' do
                        Re-activate
