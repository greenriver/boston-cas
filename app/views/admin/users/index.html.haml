-if can_edit_translations?
  = render 'menus/admin_tabs'

.o-page
  .o-page__title
    %h1= t '.title'
    .o-page__action.o-page__action--stacked
      = link_to new_user_invitation_path, class: 'btn btn-primary pull-right margin-bottom-02' do
        %span.icon-plus
        Add a User Account
      = link_to 'Manage Roles', admin_roles_path

  - @prompt = t '.search_prompt'

  .row
    .col-sm-6
      = render 'search_form'

%ul.nav.nav-tabs
  %li.nav-item
    %a.nav-link.active{href: '#active', role: "presentation", data: {toggle: :tab}}
      Active Accounts
  %li.nav-item
    %a.nav-link{href: '#inactive', role: "presentation", data: {toggle: :tab}}
      Inactive Accounts
.tab-content
  .tab-pane.active#active
    .row.table-utilities
      .col-sm-8
        %p= page_entries_info @users, entry_name: 'user account'
        :ruby
          columns = ['last_name', 'email']
          directions = current_sort_order(Hash[columns.map {|x| [x, nil]}])
          titles = {}
          directions.each {| k,v | titles[k] = @users.human_attribute_name(k)}
          titles['last_name'] = 'Name'
    .row
      .col-sm-12
        .table-responsive
          %table.table.table-condensed
            %thead
              %tr
                - titles.each do | k, title |
                  %th
                    = manual_sort_link(titles[k], k, directions)
                    %i{:class => ["fa", "fa-sort-#{directions[k]}"] }
                %th Roles
                %th Status
                %th Matches
                - if can_become_other_users?
                  %th
                %th
                %th
            %tbody
              - @users.each do |user|
                %tr
                  %td= user.name
                  %td
                    = user.email
                  %td= user.roles_string
                  %td= render 'user_invitation_status', user: user
                  %td.text-center
                    - matches = user.contact.try(:client_opportunity_match_contacts) || []
                    = matches.size
                  - if can_become_other_users?
                    %td
                      - if @available_for_becoming.include?(user.id)
                        = link_to admin_user_become_path(user_id: user.id) do
                          %span.icon-enter
                          Become
                  %td
                    = link_to action: :edit, id: user do
                      %span.icon-pencil
                      Edit
                  %td
                    = link_to admin_user_path(user),  method: :delete, data: {confirm: "Would you really like to delete the account for: #{user.name}?"} do
                      %span.icon-cross
                      Delete

        %p= paginate @users, params: {sort: directions.compact.keys.first, direction: directions.compact.values.first}
  .tab-pane#inactive
    .table-responsive
      %table.table.table-condensed
        %thead
          %tr
            - titles.each do | k, title |
              %th
                = manual_sort_link(titles[k], k, directions)
                %i{:class => ["fa", "fa-sort-#{directions[k]}"] }
        %tbody
          - @inactive_users.each do |user|
            %tr
              %td= user.name
              %td
                = user.email