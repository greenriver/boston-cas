.row
  .col-xs-12
    .match-decision
      %p
        - hearing_date = @match.schedule_criminal_hearing_housing_subsidy_admin_decision.criminal_hearing_date
        - if hearing_date.present?
          Please note: a criminal background hearing has been schedule for 
          %strong
            = "#{hearing_date.to_s}."
        - else
          Please note: No criminal background hearing was requested.
      %p Once you have enough information about this match, please accept or decline the match accordingly.
      = simple_form_for @decision, url: access_context.match_decision_path(@match, @decision) do |form|
        = form.input :note, as: :text, input_html: {rows: 4, disabled: (!@decision.editable?)}

        = render 'match_decisions/decline_reason', form: form

        .form-actions.clearfix
          - if can_reject_matches?
            = render 'match_decisions/park_client', form: form
            .well
              = render 'match_decisions/cancel_match_form_fields', form: form
          = form.submit 'Decline Match', class: 'btn btn-secondary jDecline', data: {submit_param_name: 'decision[status]', submit_param_value: 'declined'}, disabled: (!@decision.editable?)
          = form.submit 'Accept Match Recommendation', class: 'btn btn-primary jAccept', data: {submit_param_name: 'decision[status]', submit_param_value: 'accepted'}, disabled: (!@decision.editable?)

        %p If the match is declined, the DND will be informed of the decision. If accepted, all involved parties will be notified.
        
      = content_for :page_js do
        :javascript
          function update_button_states(e) {
    
            var prevent_matching_present = $('#decision_prevent_matching_until').val() != '';
            if(prevent_matching_present) {
              $('.jAccept').prop('disabled', true);
              // $('.jDecline').prop('disabled', false);         
            }
            
            var decline_reason_present = $(".decision_decline_reason input:checkbox:checked").length > 0;
            if(decline_reason_present) {
              //Disable cancel and accept 
              $('.jAccept').prop('disabled', true);
              $('.jCancel').prop('disabled', true);
              
              //Clear cancel reason
              if ($(e.currentTarget).attr('class') != $('.decision_administrative_cancel_reason').attr('class')){
                $(".decision_administrative_cancel_reason input:checkbox:checked").removeAttr('checked')
              }    
              
              //Enable decline button
              $('.jDecline').removeAttr('disabled');                 
            }
            
            var cancel_reason_present = $(".decision_administrative_cancel_reason input:checkbox:checked").length > 0;
            if(cancel_reason_present) {
              //Disable decline and accept 
              $('.jAccept').prop('disabled', true);
              $('.jDecline').prop('disabled', true);
              
              //Clear decline reason
              if ($(e.currentTarget).attr('class') != $('.decision_decline_reason').attr('class')){
                $(".decision_decline_reason input:checkbox:checked").removeAttr('checked')
              }   
              
              //Enable cancel button
              $('.jCancel').removeAttr('disabled');       
            }
            
            
            if(! prevent_matching_present && ! decline_reason_present & ! cancel_reason_present) {
              $('.jAccept').removeAttr('disabled');
              $('.jDecline').removeAttr('disabled');
              $('.jCancel').removeAttr('disabled');
            }
          }

          $('.jButtonStateTriggers').on("change", update_button_states);
          $('.jButtonStateTriggers').trigger('change');
