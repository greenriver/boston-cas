- @assessment.form_fields.each do |field_name, options|
  - display_options = options.merge(limited: limited)
  - if options[:as] == :partial
    = render options[:partial], locals: display_options, form: form
  - else
    .c-question{data: { number: options[:number] }}
      .c-question__wrapper
        - if options[:questions].present?
          .c-question__number= options[:number]
          .c-question__input
            - if disabled
              - display_options[:value] = ''
              - display_options[:hide_value] = true
              = render 'non_hmis_clients/assessments/question_display', locals: display_options
              - options[:questions].each do |sub_field_name, sub_options|
                - display_options = sub_options
                - val = @assessment[sub_field_name]
                - if options[:collection].present?
                  - if val.is_a?(Array)
                    - val = options[:collection].invert.values_at(*val)
                  - else
                    - val = options[:collection].invert[val]
                - display_options[:value] = val
                = render 'non_hmis_clients/assessments/question_display', locals: display_options
            - else
              %label= options[:label]
              - options[:questions].each do |sub_field_name, sub_options|
                - if sub_options[:as] == :partial
                  = render sub_options[:partial], locals: display_options, form: form
                - else
                  .mb-1
                    - if sub_options[:label] && sub_options[:as].present? && [:pretty_checkboxes_group, :pretty_boolean, :text].exclude?(sub_options[:as])
                      = form.label sub_field_name, { label: sub_options[:label] }
                    = form.input(sub_field_name, {}.merge(sub_options))
        - elsif options[:as] == :pretty_boolean_group
          .c-question__number= options[:number]
          - if disabled
            - val = @assessment.public_send(field_name)
            - if options[:collection].present?
              - if val.is_a?(Array)
                - val = options[:collection].invert.values_at(*val)
              - else
                - val = options[:collection].invert[val]
            - display_options[:value] = val
            = render 'non_hmis_clients/assessments/question_display', locals: display_options
          - else
            .c-question__input
              = form.label field_name, { pre_label: options[:number] }.merge(options)
              - if options[:hint]
                .hint
                  %em= options[:hint]
              = form.input field_name, collection: options[:collection], label: false, as: :pretty_boolean_group, wrapper: :custom_boolean, input_html: options[:input_html]
        - else
          .c-question__number= options[:number]
          - if disabled
            - val = @assessment.public_send(field_name)
            - if options[:collection].present?
              - if val.is_a?(Array)
                - val = options[:collection].invert.values_at(*val)
              - else
                - val = options[:collection].invert[val]
            - display_options[:value] = val
            = render 'non_hmis_clients/assessments/question_display', locals: display_options
          - else
            .c-question__input
              - if options[:as] == :pretty_boolean
                = form.input(field_name, {}.merge(options))
              - else
                - field_locked = @assessment.locked? && @assessment.lockable_fields.include?(field_name)
                - locked_note = if field_locked then "Locked until #{@assessment.locked_until}" else '' end
                = form.input(field_name, { pre_label: options[:number], disabled: field_locked, hint: locked_note }.merge(options))

= render 'non_hmis_clients/assessments/pathways_version_four_js'
