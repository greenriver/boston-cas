= simple_form_for @program do |f|
  .form-inputs
    = render 'programs/program_bits', f: f
    = f.simple_fields_for :sub_programs do |sp|
      %p 
        %strong 
          Sub-Program Fields:
        The fields below will used to create a first 'sub-program'. Sub-programs facilitate identifying multiple sub-contractors on a program. You'll have the option to add additional sub-programs.
      .form-group.form-group__indented-02
        = sp.input :name
      .form-group.form-group__indented-02
        = sp.input :confidential, label: 'Is this a confidential sub-program?', hint: 'Anyone in a match involving a confidential program will have their name hidden on lists of matches by default.'
      .form-group.form-group__indented-02
        = sp.association :housing_subsidy_administrator, label: "#{_('Housing Subsidy Administrator')}"
      .form-group.form-group__indented-02
        = sp.association :service_provider, label: 'Service Provider', required: true
      .form-group.form-group__indented-02
        = sp.association :sub_contractor, label: 'Sub-Contractor'
      .form-group.form-group__indented-02.radio_buttons.program-type
        = sp.label :program_type, required: true do
          %abbr{'data-original-title' => 'required'}*
          Project, Tenant, or Sponsor-Based?
        - SubProgram.types.each do |t|
          .radio
            = sp.label :program_type, for: "program_sub_programs_attributes_#{sp.index}_program_type_#{t[:value].downcase}" do
              = sp.radio_button :program_type, t[:value]
              = t[:label]
            - if t[:building]
              = building = sp.association :building, label: 'Building Name', wrapper_html: {class: 'building form-group__indented-01'}, input_html: {class: 'jBuilding'}
    
      = render 'service_manager/form_fields', form: f, heading: 'Services Attached to this Program'
    
      = render 'requirement_manager/form_fields', form: f, selected_requirements_heading: 'Rules for this Program', help_text: "In programs with more than one #{Building.model_name.human.downcase}, when a match is made, only #{Building.model_name.human.downcase} rules for the applicable #{Building.model_name.human.downcase} will be applied.  If you need to ensure a rule will be applied across all #{Building.model_name.human.downcase} in the program, add it on this program screen as well."
      .form-group.eligibility-requirement-notes
        = sp.input :eligibility_requirement_notes, hint: 'If there are eligibility requirements that don\'t fit within the defined rules, provide a brief explanation here.  They will be displayed on any match involving this opportunity.', label: 'Eligibility Requirement Notes'
  .form-actions
    - if @program.id
      = f.button :submit, value: 'Add Sub-Program', class: 'btn btn-primary'
    - else
      = f.button :submit, class: 'btn btn-primary'

= content_for :page_js do
  :javascript
    $('select').select2();
    
    $('.program-type').on('change', 'input', function() {
      var have_buildings = #{SubProgram.have_buildings};
      $('div.building').hide();
      if($.inArray(this.value, have_buildings) != -1) {
        $(this).parent().siblings('.building').show();
      }
    });
    // Keep all buildings in sync
    $('.jBuilding').on('change', function(e){
      var v = this.value;
      $('.jBuilding').not(this).each(function(d) {
        this.value = v;
        $(this).trigger('change.select2');
      });
    });
    $('.program-type input:checked').trigger('change');
    

