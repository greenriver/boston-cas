.o-page__title
  %h1= t '.title'
  - @prompt = t '.search_prompt'
  - if can_edit_programs?
    .o-page__action.o-page__action--stacked
      = link_to new_program_path, class: 'btn btn-primary margin-bottom-02' do
        %span.icon-plus
        Add a Program
      %a.how-to-popover{'data-toggle': "popover", 'data-placement': "bottom", 'data-content': "<ol><li>Click on the program name in this page's list</li><li>On Edit Program Details screen, click Add a Sub-Program button</li></ol>", role: 'button', 'tabindex': 0,'data-html': "true", 'data-trigger': "focus"}
        %span.icon-info
        How to Add a Sub-Program

.row
  .col-sm-6
    = render 'search_form'
  .col-sm-6.filter-sort__filter.d-flex
    = render 'filter'
    = render 'sort', sort_options: Program.sort_options
.row.table-utilities
  .col-sm-8
    %p= page_entries_info @programs, entry_name: 'Sub-Programs'
  .col-sm-4
    .d-flex
      .ml-auto
        = link_to programs_path(format: :xlsx), class: 'btn btn-secondary' do
          %span.icon-download2
          Download
    :ruby
      columns = ['program_id', 'sub_program_id', 'building_id']

      directions = current_sort_order(Hash[columns.map {|x| [x, nil]}])
      titles = {}
      directions.each {| k,v | titles[k] = @programs.human_attribute_name(k)}
      titles['program_id'] = 'Program'
      titles['building_id'] = "#{Building.model_name.human}"
      titles['sub_program_id'] = 'Sub-Program'
.table-responsive
  .c-card.c.card__flush.mb-4
    .c-card__content.p-0
      %table.table.table-striped.mb-0
        %thead
          %tr
            - titles.each do | k, title |
              %th
                = manual_sort_link(titles[k], k, directions)
                %i{:class => ["fa", "fa-sort-#{directions[k]}"] }
            - if MatchRoutes::Base.more_than_one?
              %th Route
            %th Organization
            %th Available/Unmatched
            %th In Progress
            %th Successful
        %tbody
          - @programs.each do |sp|
            - if sp.deleted_at
              - deleted = "deleted"
            %tr
              %td{:class => deleted}
                - if can_edit_programs? || sp&.editable_by?(current_user)
                  - if ! sp.deleted_at
                    = link_to sp.program.name, edit_program_sub_program_path(sp.program, sp)
                  - else
                    = link_to "Restore #{sp.program.name}", program_restore_path(sp.program.id), method: :post
                - else
                  = sp.program.name
              %td{:class => deleted}
                - if can_edit_programs? || sp&.editable_by?(current_user)
                  - if ! sp.deleted_at
                    = link_to sp.name_with_status, edit_program_sub_program_path(sp.program, sp)
                  - else
                    = link_to "Restore #{sp.name_with_status}", program_restore_path(sp.program.id), method: :post
                - else
                  = sp.name_with_status
              %td{:class => deleted}
                = sp.site
              - if MatchRoutes::Base.more_than_one?
                %td{:class => deleted}
                  = sp.program.match_route&.title
              %td{:class => deleted}
                = sp.organizations.join(', ')
              %td{:class => deleted}
                = sp.vacancies
              %td{:class => deleted}
                = sp.in_progress
              %td{:class => deleted}
                = sp.matched

%p= paginate @programs, params: {sort: directions.compact.keys.first, direction: directions.compact.values.first}
