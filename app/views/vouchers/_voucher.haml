- voucher = v.object
- disabled = false
- # disable the form fields if we have a successful or active match
- default_building_id = voucher.building.try(:id)
- default_unit_id = voucher.unit.try(:id)
- default_unit_name = voucher.unit.try(:name)
- if voucher.status_match.present? || @subprogram.closed?
  - disabled = true
- else
  - disabled_units = voucher&.building&.unavailable_units_for_vouchers_ids
- if voucher.creator
  - creation_info = voucher.creator.name + '<br />' + voucher.created_at.to_s.humanize
- else
  - creation_info = voucher.created_at.to_s.humanize
.c-card.c-card-flush{data: {opportunity_id: voucher.opportunity&.id, elevator_access: voucher.unit&.elevator_accessible&.to_s}}
  .c-card__content
    .c-detail-group.row
      - if voucher.errors.any?
        .alert.alert-warning
          = voucher.errors.full_messages_for(:base).join(', ')
      .col-sm-4.c-detail-group.c-detail-group--stacked.c-detail-group--bordered
        - if @subprogram.has_buildings?
          %h3.detail-box--label Building & Unit
          .detail-box--value
            .vouchers--building.mb-4
              = v.input_field :building_id, collection: Building.all, selected: default_building_id, disabled: disabled, class: 'has-dependent'
            .vouchers--unit
              = v.association :unit, collection: voucher.units_including_unavailable, disabled: (disabled || disabled_units), input_html: {data: {dependent: true, url: '/buildings/:id/units.json', 'value-method' => :id, 'label-method' => :name, default_parent_id: default_building_id, default_value: default_unit_id, default_label: default_unit_name}, class: "sub_program_vouchers_attributes_#{v.index}_building_id jUnit", style: "width: 100%;"}, label: false
              = link_to 'Add', new_program_sub_program_unit_for_building_path(@program, @subprogram, building_id: voucher.building.try(:id)), data: {loads_in_ajax_modal: true}, class: 'jAddUnit btn btn-sm btn-secondary'
              = link_to 'Edit', edit_program_sub_program_unit_for_building_path(program_id: @program.id, sub_program_id: @subprogram.id, id: 1), data: {loads_in_ajax_modal: true}, class: 'jEditUnit btn btn-sm btn-secondary'
        - else
          %h3.detail-box--label Voucher Only

      .col-sm-4.c-detail-group.c-detail-group--stacked.c-detail-group--bordered
        %h3.detail-box--label Availability
        .row
          .col-sm-10
            = v.input :available, disabled: disabled, as: :boolean
          .col-sm-2
            %span.ml-4.icon-info{data:{ toggle: :tooltip, placement: :top, title: creation_info.html_safe, html: :true}}
        .detail-box-value
          = v.input :date_available, disabled: disabled, as: :date_picker, value: voucher.date_available, label: 'Date voucher or unit becomes available'
        - if can_edit_voucher_rules?
          .rules
            - requirement_count = voucher.requirements.count
            = link_to edit_program_sub_program_voucher_path(@program, @subprogram, voucher), class: 'btn btn-sm btn-secondary', data: { loads_in_ajax_modal: true } do
              Voucher Rules
              - if requirement_count.positive?
                .badge.badge-info.ml-4.p-2= requirement_count

      .col-sm-4.c-detail-group.c-detail-group--stacked.c-detail-group
        %h3.detail-box--label Status
        .detail-box-value.d-flex.flex-wrap
          - if voucher.status_match.present?
            - can_see_details_of_this_match = ClientOpportunityMatch.accessible_by_user(current_user).where(id: voucher.status_match.id).present? rescue false
            - if can_see_details_of_this_match
              = link_to voucher.status_match.overall_status[:name], match_path(voucher.status_match)
            - else
              = voucher.status_match.overall_status[:name]
            - if voucher.status_match.active? && can_reject_matches?
              = link_to unavailable_program_sub_program_voucher_path(@subprogram.program, @subprogram, voucher), class: 'ml-auto btn btn-secondary btn-sm', method: :delete, data: {confirm: "Stopping this match will remove anyone in the match and make the voucher unavailable.  There will be NO notifications.  This should only be used when a voucher was made available incorrectly. Are you sure you want to stop the match?"} do
                Stop Match
          - else
            No Match
        - if voucher.status_match.present?
          %h3.detail-box--label.mt-4 Active Clients
          .detail-box-value.d-flex.flex-wrap
          - if voucher.status_match.client.present?
            - if can_view_all_matches?
              - voucher.client_opportunity_matches.each do |match|
                - next unless match.active?
                .client-name
                  = link_to client_path(match.client) do
                    = match.client_name_for_contact current_contact, hidden: match.confidential? && ! show_confidential_names?
            - else
              - voucher.client_opportunity_matches.each do |match|
                - next unless match.active?
                .client-name
                  = match.client_name_for_contact current_contact, hidden: match.confidential? && ! show_confidential_names?
        %h3.detail-box--label.mt-4 Alternate Clients
        .detail-box-value
          - if voucher.opportunity.present?
            = link_to opportunity_matches_path(voucher.opportunity) do
              Prioritized Clients
    .detail-box-value.d-flex.flex-wrap.justify-content-end.align-items-end
      - if voucher.can_be_destroyed?
        = link_to program_sub_program_voucher_path(id: voucher.id), method: :delete, data: {confirm: "Are you sure you want to delete this voucher?"}, class: 'btn btn-danger btn-sm' do
          %span.icon-cross
          Delete
